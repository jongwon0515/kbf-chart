{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override airflow.fullname template with a string (will prepend the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override airflow.fullname template with a string",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Schema Registry image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Schema Registry image repository",
                    "default": "bitnami/schema-registry"
                },
                "tag": {
                    "type": "string",
                    "description": "Schema Registry image tag (immutable tags are recommended)",
                    "default": "7.4.1-debian-11-r25"
                },
                "digest": {
                    "type": "string",
                    "description": "Schema Registry image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Schema Registry image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Schema Registry image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable image debug mode",
                    "default": false
                }
            }
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "hostAliases": {
            "type": "array",
            "description": "Schema Registry pods host aliases",
            "default": [],
            "items": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for Schema Registry pods",
            "default": {}
        },
        "configuration": {
            "type": "object",
            "description": "Specify content for schema-registry.properties. Auto-generated based on other parameters when not specified",
            "default": {}
        },
        "existingConfigmap": {
            "type": "string",
            "description": "Name of existing ConfigMap with Schema Registry configuration",
            "default": ""
        },
        "log4j": {
            "type": "object",
            "description": "Schema Registry Log4J Configuration (optional)",
            "default": {}
        },
        "existingLog4jConfigMap": {
            "type": "string",
            "description": "Name of existing ConfigMap containing a custom log4j.properties file.",
            "default": ""
        },
        "auth": {
            "type": "object",
            "properties": {
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable TLS configuration to provide to be used when a listener uses HTTPS",
                            "default": false
                        },
                        "jksSecret": {
                            "type": "string",
                            "description": "Existing secret containing the truststore and one keystore per Schema Registry replica",
                            "default": ""
                        },
                        "keystorePassword": {
                            "type": "string",
                            "description": "Password to access the keystore when it's password-protected",
                            "default": ""
                        },
                        "truststorePassword": {
                            "type": "string",
                            "description": "Password to access the truststore when it's password-protected",
                            "default": ""
                        },
                        "clientAuthentication": {
                            "type": "string",
                            "description": "Client authentication configuration.",
                            "default": "NONE"
                        }
                    }
                },
                "kafka": {
                    "type": "object",
                    "properties": {
                        "jksSecret": {
                            "type": "string",
                            "description": "Existing secret containing the truststore and one keystore per Schema Registry replica",
                            "default": ""
                        },
                        "tlsEndpointIdentificationAlgorithm": {
                            "type": "string",
                            "description": "The endpoint identification algorithm used validate brokers hostnames",
                            "default": "https"
                        },
                        "keystorePassword": {
                            "type": "string",
                            "description": "Password to access the keystore when it's password-protected",
                            "default": ""
                        },
                        "truststorePassword": {
                            "type": "string",
                            "description": "Password to access the truststore when it's password-protected",
                            "default": ""
                        },
                        "saslMechanism": {
                            "type": "string",
                            "description": "Mechanism that schema registry will use to connect to kafka. Allowed: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512",
                            "default": "PLAIN"
                        }
                    }
                }
            }
        },
        "listeners": {
            "type": "string",
            "description": "Comma-separated list of listeners that listen for API requests over either HTTP or HTTPS",
            "default": "http://0.0.0.0:8081"
        },
        "avroCompatibilityLevel": {
            "type": "string",
            "description": "Avro compatibility type",
            "default": "backward"
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to be set on Schema Registry container",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars",
            "default": ""
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of Schema Registry replicas to deploy.",
            "default": 1
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Schema Registry statefulset strategy type",
                    "default": "RollingUpdate"
                }
            }
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "Statefulset Pod management policy, it needs to be Parallel to be able to complete the cluster join",
            "default": "OrderedReady"
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for Schema Registry pods",
            "default": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "priorityClassName": {
            "type": "string",
            "description": "Schema Registry pod priority class name",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "object",
            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
            "default": {}
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default) for Schema Registry pods",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "Seconds Redmine pod needs to terminate gracefully",
            "default": ""
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the Schema Registry container(s) to automate configuration before or after startup",
            "default": {}
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Controller pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set Controller pod's Security Context fsGroup",
                    "default": 1001
                },
                "sysctls": {
                    "type": "array",
                    "description": "sysctl settings of the Schema Registry pods",
                    "default": [],
                    "items": {}
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable container security context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the container",
                    "default": 1001
                }
            }
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the container",
                    "default": {}
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 20
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 20
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 20
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom livenessProbe that overrides the default one",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readinessProbe that overrides the default one",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom startupProbe that overrides the default one",
            "default": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for schema-registry pods",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for schema-registry container(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the Schema Registry pods.",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the Schema Registry pods.",
            "default": [],
            "items": {}
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable/disable a Pod Disruption Budget creation",
                    "default": false
                },
                "minAvailable": {
                    "type": "number",
                    "description": "Minimum number/percentage of pods that must still be available after the eviction",
                    "default": 1
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Maximum number/percentage of pods that may be made unavailable after the eviction",
                    "default": ""
                }
            }
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable autoscaling for replicas",
                    "default": false
                },
                "minReplicas": {
                    "type": "number",
                    "description": "Minimum number of replicas",
                    "default": 1
                },
                "maxReplicas": {
                    "type": "number",
                    "description": "Maximum number of replicas",
                    "default": 11
                },
                "targetCPU": {
                    "type": "string",
                    "description": "Target CPU utilization percentage",
                    "default": ""
                },
                "targetMemory": {
                    "type": "string",
                    "description": "Target Memory utilization percentage",
                    "default": ""
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Service HTTP port",
                            "default": 8081
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Service HTTP node port",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Schema Registry service clusterIP IP",
                    "default": ""
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Enable client source IP preservation",
                    "default": "Cluster"
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP if service type is LoadBalancer",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Address that are allowed when service is LoadBalancer",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for Schema Registry service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in Schema Registry service (normally used with the `sidecars` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for Schema Registry",
                    "default": false
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "schema-registry.local"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for the ingress record",
                    "default": {}
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable the creation of a ServiceAccount for Schema Registry pods",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the created ServiceAccount to use",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional Service Account annotations (evaluated as a template)",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                }
            }
        },
        "kafka": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable Kafka chart installation",
                    "default": true
                },
                "controller": {
                    "type": "object",
                    "properties": {
                        "replicaCount": {
                            "type": "number",
                            "description": "Number of Kafka controller-eligible (controller+broker) nodes",
                            "default": 1
                        }
                    }
                },
                "listeners": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "object",
                            "properties": {
                                "protocol": {
                                    "type": "string",
                                    "description": "Authentication protocol for communications with clients. Allowed protocols: `PLAINTEXT`, `SASL_PLAINTEXT`, `SASL_SSL`, `SSL`",
                                    "default": "PLAINTEXT"
                                }
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "client": {
                                    "type": "number",
                                    "description": "Kafka svc port for client connections",
                                    "default": 9092
                                }
                            }
                        }
                    }
                },
                "extraConfig": {
                    "type": "string",
                    "description": "Additional configuration to be appended at the end of the generated Kafka configuration file.",
                    "default": "offsets.topic.replication.factor=1"
                },
                "sasl": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "object",
                            "properties": {
                                "users": {
                                    "type": "array",
                                    "description": "Comma-separated list of usernames for Kafka client listener when SASL is enabled",
                                    "default": [
                                        "user"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "passwords": {
                                    "type": "string",
                                    "description": "Comma-separated list of passwords for client listener when SASL is enabled, must match the number of client.users",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalKafka": {
            "type": "object",
            "properties": {
                "brokers": {
                    "type": "array",
                    "description": "Array of Kafka brokers to connect to. Format: protocol://broker_hostname:port",
                    "default": [
                        "PLAINTEXT://localhost:9092"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "listener": {
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "description": "Kafka listener protocol. Allowed protocols: PLAINTEXT, SASL_PLAINTEXT, SASL_SSL and SSL",
                            "default": "PLAINTEXT"
                        }
                    }
                },
                "sasl": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "description": "User for SASL authentication",
                            "default": "user"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for SASL authentication",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing a password for SASL authentication (under the key named \"client-passwords\")",
                            "default": ""
                        }
                    }
                }
            }
        }
    }
}